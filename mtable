<!DOCTYPE html>
<html>
<head>

<style>
 body {line-height: 1em; padding: 0px; margin: 0px; 
       background-image:
        linear-gradient(to right, 
        hsl(180, 100%, 20%),
        hsl(240, 100%, 20%),
        hsl(300, 100%, 20%)
       )} 
 h2,input,button  {color: magenta; 
                    background-image:
                     linear-gradient(to right, 
                     hsl(180, 100%, 20%),
                     hsl(240, 100%, 20%),
                     hsl(300, 100%, 20%)
                    )
                                                   } 
 span {font-family: monospace;
       display: inline-block;
        width: 20px;
        height: 20px;
        font-size: 0.75em; 
         padding: 4px;
         margin: 0px;
      }
  input,
  button
        { width: 30px; 
          border: 1px solid #bbb;
          transition: 1s;
          outline: none;
          border-radius: 3px;
        }
   input:focus
   input:button
               {
                 border: 1px solid red;
                 transition: 1s;
               }
  button {width: 200px;} 
</style>
  
</head>  

<body>
<center>
 <h2>Colored Multiplication Table <br>
 </h2>
  <button onclick=startChangingColor()>Change Colors</button>
  <br>
 <input id=myTableSize type=number value="10" onchange=drawTable()></input>
 
  
 <div id=myTable>
 </div> 
  
</center>

  
<script>
         //---- onchange in myTableSize <input>-------------
         function drawTable(){
                  let n= +myTableSize.value
                  let s=""
                   for (let i = 1; i <= n; i++) {
                     for (let j = 1; j <= n; j++) {
                          let a = i * j;
                           let a_ = a*3.6; //color angle
                            let color = `hsl(${a_}, 100%, 50%)`;
                            let b_ = a_ + 180 //background color angle
                             let back = `hsl(${b_}, 50%, 70%)`;
                              s += `<span id="${i}*${j}" style="color: ${color}; background-color: ${back}; ">${a} </span>`; 
                     }
                      s += "<br>";
                   }
                      myTable.innerHTML = s;
                      myTableSize.focus();
         }   

  
         let cc=0;
         function changeColor(){
            let n= +myTableSize.value
            cc++;
             cc %=100
             for (let i = 1; i <= n; i++) {
               for (let j = 1; j <= n; j++) {
                    let a = i * j;
                     let a1 = a-cc;
                     let sp = document.getElementById(`${i}*${j}`);
                    //  if(i==1 && j==1)console.dir(sp.style.color)
                      let a_ = a1*3.6; //color angle
                        sp.style.color=`hsl(${a_}, 100%, 50%)`;;
                       //   if(i==1 && j==1)console.log(sp.style.color);
                       let b_ = a_ + 180 //background color angle
                        sp.style.backgroundColor=`hsl(${b_}, 50%, 70%)`;
               }
             }
        }   

         var timer; 
          function startChangingColor(){
                   if(!timer) timer = setInterval(changeColor, 50);      
                      else   { clearInterval(timer);
                               timer =null; 
                             };
          } 
  
drawTable();
 
</script>

</body>
</html>
